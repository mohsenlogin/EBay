//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LMS
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class LMSEntitiy : DbContext
    {
        public LMSEntitiy()
            : base("name=LMSEntitiy")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Agent> Agent { get; set; }
        public DbSet<Attachement> Attachement { get; set; }
        public DbSet<Category> Category { get; set; }
        public DbSet<City> City { get; set; }
        public DbSet<Complainant> Complainant { get; set; }
        public DbSet<Court> Court { get; set; }
        public DbSet<CourtSession> CourtSession { get; set; }
        public DbSet<Invited> Invited { get; set; }
        public DbSet<InvolvedPersonnel> InvolvedPersonnel { get; set; }
        public DbSet<InvolvedUnits> InvolvedUnits { get; set; }
        public DbSet<LegalDocument> LegalDocument { get; set; }
        public DbSet<LegalPersonality> LegalPersonality { get; set; }
        public DbSet<Municipality> Municipality { get; set; }
        public DbSet<Person> Person { get; set; }
        public DbSet<Personnel> Personnel { get; set; }
        public DbSet<PersonnelPost> PersonnelPost { get; set; }
        public DbSet<Post> Post { get; set; }
        public DbSet<Province> Province { get; set; }
        public DbSet<Role> Role { get; set; }
        public DbSet<RoleAccess> RoleAccess { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<Unit> Unit { get; set; }
        public DbSet<User> User { get; set; }
        public DbSet<UserRole> UserRole { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<usp_checkLogin_Result1> usp_checkLogin(string username, string pass)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_checkLogin_Result1>("usp_checkLogin", usernameParameter, passParameter);
        }
    
        public virtual ObjectResult<usp_checkLogin1_Result> usp_checkLogin1(string username, string pass)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_checkLogin1_Result>("usp_checkLogin1", usernameParameter, passParameter);
        }
    
        public virtual ObjectResult<usp_getUserInfo_Result> usp_getUserInfo(string username, string token)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getUserInfo_Result>("usp_getUserInfo", usernameParameter, tokenParameter);
        }
    
        public virtual ObjectResult<uspGetPersons_Result> uspGetPersons(Nullable<int> officeId)
        {
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("OfficeId", officeId) :
                new ObjectParameter("OfficeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPersons_Result>("uspGetPersons", officeIdParameter);
        }
    
        public virtual ObjectResult<usp_getComplainantsInfo_Result> usp_getComplainantsInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getComplainantsInfo_Result>("usp_getComplainantsInfo");
        }
    
        public virtual ObjectResult<usp_GetLegalDocs_Result> usp_GetLegalDocs(Nullable<int> municipalityId, string title, string number, string summary)
        {
            var municipalityIdParameter = municipalityId.HasValue ?
                new ObjectParameter("MunicipalityId", municipalityId) :
                new ObjectParameter("MunicipalityId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("Summary", summary) :
                new ObjectParameter("Summary", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLegalDocs_Result>("usp_GetLegalDocs", municipalityIdParameter, titleParameter, numberParameter, summaryParameter);
        }
    
        public virtual ObjectResult<usp_getLegalPersonalities_Result> usp_getLegalPersonalities(Nullable<int> municipalityId)
        {
            var municipalityIdParameter = municipalityId.HasValue ?
                new ObjectParameter("MunicipalityId", municipalityId) :
                new ObjectParameter("MunicipalityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getLegalPersonalities_Result>("usp_getLegalPersonalities", municipalityIdParameter);
        }
    
        public virtual int usp_insertAttachement(string url, Nullable<int> legalDocumentId, string type)
        {
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var legalDocumentIdParameter = legalDocumentId.HasValue ?
                new ObjectParameter("LegalDocumentId", legalDocumentId) :
                new ObjectParameter("LegalDocumentId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_insertAttachement", urlParameter, legalDocumentIdParameter, typeParameter);
        }
    
        public virtual int usp_insertCompainant(Nullable<int> legalDocumentRef, Nullable<int> personRef, Nullable<int> legalPersonalityRef, Nullable<int> municipalityRef, Nullable<int> iD)
        {
            var legalDocumentRefParameter = legalDocumentRef.HasValue ?
                new ObjectParameter("LegalDocumentRef", legalDocumentRef) :
                new ObjectParameter("LegalDocumentRef", typeof(int));
    
            var personRefParameter = personRef.HasValue ?
                new ObjectParameter("PersonRef", personRef) :
                new ObjectParameter("PersonRef", typeof(int));
    
            var legalPersonalityRefParameter = legalPersonalityRef.HasValue ?
                new ObjectParameter("LegalPersonalityRef", legalPersonalityRef) :
                new ObjectParameter("LegalPersonalityRef", typeof(int));
    
            var municipalityRefParameter = municipalityRef.HasValue ?
                new ObjectParameter("MunicipalityRef", municipalityRef) :
                new ObjectParameter("MunicipalityRef", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_insertCompainant", legalDocumentRefParameter, personRefParameter, legalPersonalityRefParameter, municipalityRefParameter, iDParameter);
        }
    
        public virtual int usp_insertLegalPersonality(string name, Nullable<int> provinceId, Nullable<int> cityId, string address, string phone, string type, Nullable<int> municipalityId, ObjectParameter iD)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var municipalityIdParameter = municipalityId.HasValue ?
                new ObjectParameter("MunicipalityId", municipalityId) :
                new ObjectParameter("MunicipalityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_insertLegalPersonality", nameParameter, provinceIdParameter, cityIdParameter, addressParameter, phoneParameter, typeParameter, municipalityIdParameter, iD);
        }
    }
}
